// Async promise fetch method to use to handle calls | So there is no overload seperate unnecessary files and easier work flow

// ACCEPTED PROPS: 
// - route
// - ?body 
// - ?isSubmit - bool -> show loading button animation
// - ?method - default GET
// - ?event
// - ?callback(res)
// - ?setAlert
// - ?errorCallback(res)
// - ?switch - status code handler

import { t } from "i18next";
import $ from 'jquery';
import envir from '../env.json';
import { isValid } from "./MyMethods";



function checkAndAddLoading(props) {
    if (isValid([props.isSubmit], [undefined, null, false])) {
        $("#btn-submit").addClass("btn-loading");
    }
}
function checkAndRemoveLoading(props) {
    if (isValid([props.isSubmit], [undefined, null, false])) {
        $("#btn-submit").removeClass("btn-loading");
    }
}

export default async function genericAsyncPromise(props) {
    // REPLACE IMPORTANT PROJECT VALUES
    var errorConnection = t("home_extra_general_error");
    var errorSomething = t("home_extra_general_error2");
    var logChanges = t("home_extra_save_success");
    var apiRoute = envir.Variables.WiseHomeFunctionApi;
    try {
        if (props.event !== undefined) {
            props.event.preventDefault();
        }
        if (isValid([props.isSubmit], [undefined, null, false])) {
            props.event.preventDefault();
        }
        checkAndAddLoading(props);

        var requestOptions = "";
        if (props.method === undefined || props.method.toUpperCase() === "GET") {
            requestOptions = {
                method: "GET",
                headers: {
                    'Content-Type': 'application/json', "x-functions-key": envir.Variables.WiseApiKey
                },
            };
        } else {
            requestOptions = {
                method: props.method.toUpperCase(),
                headers: {
                    'Content-Type': 'application/json', "x-functions-key": envir.Variables.WiseApiKey
                },
                body: JSON.stringify(props.body),
            };
        }

        await fetch(apiRoute + props.route, requestOptions)
            .then(response => {
                checkAndRemoveLoading(props);
                if (props.switch === undefined) {
                    switch (response.status) {
                        case 200:
                            if (isValid([props.isSubmit], [undefined, null, false])) {
                                if (isValid([props.useAlertsDispatch], [undefined, null])) {
                                    props.useAlertsDispatch({ type: "alerts_add", payload: { text: logChanges, style: "success" } });
                                }
                            }
                            return response.json();
                        case 290:
                            console.warn(`${response.status}: There was no data found in the request \n${props.route}`)
                            break;
                        case 404:
                            console.error(`${response.status}: This request route was not found, probably a backend problem \n${props.route}`)
                            break;
                        case 400:
                            if (isValid([props.useAlertsDispatch], [undefined, null])) {
                                props.useAlertsDispatch({ type: "alerts_add", payload: { text: errorSomething, style: "danger" } });
                            }
                            if (isValid([props.errorCallback], [undefined, null])) {
                                props.errorCallback(response.json())
                            }
                            console.error(`${response.status}: This request had a backend error, check the server tab and call or use this  \n${props.route}`);
                            console.log(response.json());
                            break;
                        case 500:
                            if (isValid([props.useAlertsDispatch], [undefined, null])) {
                                props.useAlertsDispatch({ type: "alerts_add", payload: { text: errorSomething, style: "danger" } });
                            }
                            if (isValid([props.errorCallback], [undefined, null])) {
                                props.errorCallback(response.json())
                            }
                            console.error(`${response.status}: This request had a SERVER error, please contact support \n${props.route}`);
                            console.log(response.json());
                            break;
                        default:
                            if (isValid([props.useAlertsDispatch], [undefined, null])) {
                                props.useAlertsDispatch({ type: "alerts_add", payload: { text: errorSomething, style: "danger" } });
                            }
                            if (isValid([props.errorCallback], [undefined, null])) {
                                props.errorCallback(response.json())
                            }
                            console.error(`${response.status}: Something went wrong \n${props.route}`);
                            console.log(response.json());
                            break;
                    }
                } else {
                    props.switch(response.status);
                }
            })
            .then(data => {
                if (!isValid([data], [undefined, null, false])) { return console.warn("No return data") }
                if (!isValid([props.callback], [undefined, null])) { return console.log("%c 200: no callback " + " - " + props.route, 'background: #222; color: #bada55') }
                props.callback(data);
            })
            .catch(error => {
                console.error(error);
                if (isValid([props.useAlertsDispatch], [undefined, null])) {
                    props.useAlertsDispatch({ type: "alerts_add", payload: { text: errorConnection, style: "danger" } });
                }
                if (isValid([props.errorCallback], [undefined, null])) {
                    props.errorCallback(error);
                }
            })


    } catch (error) {
        console.error(error);
        if (isValid([props.useAlertsDispatch], [undefined, null])) {
            props.useAlertsDispatch({ type: "alerts_add", payload: { text: errorConnection, style: "danger" } });
        }
        if (isValid([props.errorCallback], [undefined, null])) {
            props.errorCallback(error);
        }
    }
}
